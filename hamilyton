#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// Number of vertices in the graph
#define V 6

/* A utility function to print solution */
void printSolution(int path[]) {
    printf("Solution exists: Following is one Hamiltonian Cycle\n");
    for (int i = 0; i < V; i++)
        printf(" %d ", path[i]);
    // Print the first vertex again to show the complete cycle
    printf(" %d \n", path[0]);
}

/* Check if the vertex v can be added at index 'pos' in the Hamiltonian Cycle */
bool isSafe(int v, bool graph[V][V], int path[], int pos) {
    // Check if this vertex is an adjacent vertex of the previously added vertex.
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // Check if the vertex has already been included.
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

/* A recursive utility function to solve Hamiltonian Cycle problem */
bool hamCycleUtil(bool graph[V][V], int path[], int pos) {
    // base case: If all vertices are included in the path
    if (pos == V) {
        // And if there is an edge from the last included vertex to the first vertex
        if (graph[path[pos - 1]][path[0]] == 1)
            return true;
        else
            return false;
    }

    // Try different vertices as the next candidate in Hamiltonian Cycle.
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;

            if (hamCycleUtil(graph, path, pos + 1) == true)
                return true;

            // Remove current vertex if it doesn't lead to a solution
            path[pos] = -1;
        }
    }

    return false;
}

/* Solves the Hamiltonian Cycle problem using Backtracking. It mainly uses hamCycleUtil() to solve the problem. */
bool hamCycle(bool graph[V][V]) {
    int *path = (int *)malloc(V * sizeof(int));
    for (int i = 0; i < V; i++)
        path[i] = -1;

    // Let us put vertex 0 as the first vertex in the path. If there is a Hamiltonian Cycle, then the path can be started from any point of the cycle as the graph is undirected
    path[0] = 0;
    if (hamCycleUtil(graph, path, 1) == false) {
        printf("Solution does not exist\n");
        free(path);
        return false;
    }

    printSolution(path);
    free(path);
    return true;
}

int main() {
    bool graph[V][V] = {
        {0, 0, 1, 1, 1, 1},
        {0, 0, 1, 0, 0, 1},
        {1, 1, 0, 1, 1, 1},
        {1, 0, 1, 0, 1, 0},
        {1, 0, 0, 1, 0, 0},
        {1, 1, 1, 0, 0, 0}
    };

    // Print the solution
    hamCycle(graph);

    return 0;
}
